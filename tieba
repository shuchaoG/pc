# -*- coding:utf-8 -*-
import urllib
import urllib2
import re

#处理标签类
class Tool:
    #去掉img标签，7位长空格
    removeImg=re.compile('<img.*?>| {7}|')
    #删除超连接标签
    removeAddr=re.compile('<a.*?>|</a>')
    #换行注释换成\n
    replaceLine=re.compile('<tr>|<div>|</div>|</tr>')
    #把表格制表<tb>换成\t
    replaceTD=re.compile('<td>')
    #把段落开头换成\n加两个空格
    replacePara=re.compile('<p.*?>')
    #把换行符或者双换行符换成\n
    replaceBR=re.compile('<br><br>|<br>')
    #将其余标签剔除
    replaceExtra=re.compile('<.*?>')
    def replace(self,x):
        x=re.sub(self.removeImg,"",x)
        x=re.sub(self.removeAddr,"",x)
        x=re.sub(self.replaceLine,"\n",x)
        x=re.sub(self.replaceTD,"\t",x)
        x=re.sub(self.replacePara,"\n  ",x)
        x=re.sub(self.replaceBR,"\n",x)
        x=re.sub(self.replaceExtra,"",x)
        #strip()将前后多余的空格去掉
        return x.strip()




#百度
class tb:
    
    def __init__(self,baseUrl,seeLZ,floorTag):
        #初始链接地址
        self.baseURL=baseUrl
        #是否只看楼主
        self.seeLZ='?see_lz='+str(seeLZ)
        #工具类对象
        self.tool=Tool()
        #全局文件对象
        self.file=None
        #初始楼层
        self.floor=1
        #默认初始标题
        self.defaultTitle=u"百度贴吧"
        #楼层分隔符
        self.floorTag=floorTag

    def getPage(self,pageNum):
        try:
            #构建URL
            url=self.baseURL+self.seeLZ+'&pn'+str(pageNum)
            request=urllib2.Request(url)
            response=urllib2.urlopen(request)
           # print response.read()
            #返回utf－8格式编码内容 
            return response.read().decode('utf-8')
        except urllib2.URLError,e:
            if hasattr(e,'reason'):
                print "connecting error",e.reason
                return None

    def getTitle(self,page):
        #page=self.getPage(1)
        pattern=re.compile('<h3 class="core_title_txt.*?>(.*?)</h3>',re.S)
        result=re.search(pattern,page)
        if result:
            #测试输出
            #print result.group(1).strip()
            return result.group(1).strip()
        else:
            #print 'error'
            return None

    #获取总共多少页
    def getPageNum(self,page):
        #page=self.getPage(1)
        pattern=re.compile('<li class="l_reply_num.*?</span>.*?<span.*?>(.*?)</span>',re.S)
        result=re.search(pattern,page)
        if result:
            #print result.group(1).strip()
            return result.group(1).strip()
        else:
            return None

        
    def getContent(self,page):
        pattern=re.compile('<div id="post_content_.*?>(.*?)</div>',re.S)
        items=re.findall(pattern,page)
        #for item in items:
            #print item
        #print self.tool.replace(items[1])
        contents=[]
       # for item in items:
           # print floor,u"楼--------------------------------------------------------------------------/n"
           # print self.tool.replace(item)
           # floor +=1
        for item in items:
            #将文本进行去标签处理，并在前后加上换行符
            content="\n"+self.tool.replace(item)+"\n"
            contents.append(content.encode('utf-8'))
        return contents


    def setFileTitle(self,title):
        if title is not None:
            self.file=open(title+'.txt','w')
        else:
            self.file=open(defaultTitle+'.txt','w')


    def writeData(self,contents):
        #向文件写入每一层楼的信息
        for item in contents:
            if self.floorTag=='1':
                #楼之间的分割符
                floorLine='\n'+str(self.floor)+u'------------------------------------------------------\n'
                self.file.write(floorLine)
            self.file.write(item)
            self.floor +=1


    def start(self):
        indexPage=self.getPage(1)
        pageNum=self.getPageNum(indexPage)
        title=self.getTitle(indexPage)
        self.setFileTitle(title)
        if pageNum==None:
            print 'URL失效'
            return 
        try:
            print '总共' +str(pageNum)+ '页'
            for i in range(1,int(pageNum)+1):
                print '正在写入第',str(i),u'页数据'
                page=self.getPage(i)
                contents=self.getContent(page)
                self.writeData(contents)
        except IOError,e:
            print "except",e.message
        finally:
            print "sucessful"



print u'请输入帖子代号'
baseUrl="http://tieba.baidu.com/p/"+str(raw_input(u'http://tieba.baidu.com/p/'))
seeLZ=raw_input('是否只看楼主，是输入1，否输入0\n')
floorTag=raw_input('是否输入楼层信息，是输入1，否输入0\n')
bdtb=tb(baseUrl,seeLZ,floorTag)
bdtb.start()
#bdtb.getTitle()
#bdtb.getContent(bdtb.getPage(1))

