# -*- coding:utf-8 -*-
import urllib
import urllib2
import re

#处理标签类
class Tool:
    #去掉img标签，7位长空格
    removeImg=re.compile('<img.*?>| {7}|')
    #删除超连接标签
    removeAddr=re.compile('<a.*?>|</a>')
    #换行注释换成／n
    replaceLine=re.compile('<tr>|<div>|</div>|</tr>')
    #把表格制表<tb>换成／t
    replaceTD=re.compile('<td>')
    #把段落开头换成／n加两个空格
    replacePara=re.compile('<p.*?>')
    #把换行符或者双换行符换成／n
    replaceBR=re.compile('<br><br>|<br>')
    #将其余标签剔除
    replaceExtra=re.compile('<.*?>')
    def replace(self,x):
        x=re.sub(self.removeImg,"",x)
        x=re.sub(self.removeAddr,"",x)
        x=re.sub(self.replaceLine,"/n",x)
        x=re.sub(self.replaceTD,"/t",x)
        x=re.sub(self.replacePara,"/n  ",x)
        x=re.sub(self.replaceBR,"/n",x)
        x=re.sub(self.replaceExtra,"",x)
        #strip()将前后多余的空格去掉
        return x.strip()




#百度
class tb:
    
    def __init__(self,baseUrl,seeLZ):
        self.baseURL=baseUrl
        self.seeLZ='?see_lz='+str(seeLZ)
        self.tool=Tool()

    def getPage(self,pageNum):
        try:
            url=self.baseURL+self.seeLZ+'&pn'+str(pageNum)
            request=urllib2.Request(url)
            response=urllib2.urlopen(request)
           # print response.read()
            return response.read().decode('utf-8')
        except urllib2.URLError,e:
            if hasattr(e,'reason'):
                print "connecting error",e.reason
                return None

    def getTitle(self):
        page=self.getPage(1)
        pattern=re.compile('<h3 class="core_title_txt.*?>(.*?)</h3>',re.S)
        result=re.search(pattern,page)
        if result:
            #测试输出
            #print result.group(1).strip()
            return result.group(1).strip()
        else:
            #print 'error'
            return None


    def getPageNum(self):
        page=self.getPage(1)
        pattern=re.compile('<li class="l_reply_num.*?</span>.*?<span.*?>(.*?)</span>',re.S)
        result=re.search(pattern,page)
        if result:
            #print result.group(1).strip()
            return result.group(1).strip()
        else:
            return None

        
    def getContent(self,page):
        pattern=re.compile('<div id="post_content_.*?>(.*?)</div>',re.S)
        items=re.findall(pattern,page)
        #for item in items:
            #print item
        print self.tool.replace(items[1])


baseUrl="http://tieba.baidu.com/p/3138733512"
bdtb=tb(baseUrl,1)
#bdtb.getTitle()
bdtb.getContent(bdtb.getPage(1))

